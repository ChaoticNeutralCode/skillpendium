{"version":3,"sources":["components/Skill/Skill.js","components/Skill/SkillStyles.js","components/CategoryButton/CategoryButton.js","components/CategoryButton/CategoryButtonStyles.js","components/Search/Search.js","App.js","AppStyles.js","serviceWorker.js","muiTheme.js","index.js"],"names":["withStyles","theme","description","marginTop","lineHeight","letterSpacing","display","skill","classes","className","categoriesString","categories","map","s","join","Card","variant","CardContent","Typography","component","name","color","bases","perLevel","Box","dangerouslySetInnerHTML","__html","CategoryButton","state","active","toggledActive","this","props","categoryId","onToggle","setState","category","Button","button","onClick","Component","margin","Search","textField","createRef","onUpdate","current","value","evt","update","setTimeout","emit","TextField","id","label","fullWidth","onChange","bind","inputRef","App","filter","Set","text","isActive","newCategories","add","delete","size","skills","data","c","has","length","toLowerCase","includes","getSkills","Grid","container","item","actionsArea","m","updateTextFilter","i","key","updateCategoryFitler","skillsArea","breakpointCols","masonryContainer","columnClassName","masonryColumn","tag","masonryItem","welcomeText","flex","textAlign","overflow","maxHeight","justifyContent","width","padding","marginBottom","Boolean","window","location","hostname","match","SkillpendiumTheme","createMuiTheme","palette","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.09cab183.chunk.js","sourcesContent":["import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { categories } from '../../data.json';\nimport { Box, withStyles } from '@material-ui/core';\nimport { SkillStyles } from './SkillStyles';\n\nconst Skill = ({ skill, classes, className }) => {\n  const categoriesString = skill.categories\n                            .map(s => categories[s])\n                            .join(', ');\n\n  return (\n    <Card className={className} variant=\"outlined\">\n      <CardContent>\n        <Typography variant=\"h5\" component=\"h2\">\n          {skill.name}\n        </Typography>\n        <Typography color=\"textSecondary\">\n          {categoriesString}\n        </Typography>\n        {skill.bases ? (\n          <Typography color=\"textSecondary\">\n            {skill.bases.join('% / ')}% + {skill.perLevel}% a level\n          </Typography>\n          ) : (\n            ''\n        )}\n        <Box className={classes.description} dangerouslySetInnerHTML={{__html:skill.description}}/>\n        \n      </CardContent>\n    </Card>\n  );\n};\n\nexport default withStyles(SkillStyles)(Skill);","export const SkillStyles = (theme) => ({\n  description: {\n    marginTop: '1em',\n    lineHeight: '1.5em',\n    letterSpacing: 1,\n    \"& b\": {\n      display: 'block',\n      marginTop: '1em'\n    }\n  }\n});","import React, { Component } from 'react';\nimport { Button, withStyles } from '@material-ui/core';\nimport { CategoryButtonStyles } from './CategoryButtonStyles';\n\nclass CategoryButton extends Component {\n  state = {\n    active: false\n  };\n\n  onClick() {\n    const toggledActive = !this.state.active,\n          { categoryId, onToggle } = this.props;\n\n    if(onToggle) onToggle(categoryId, toggledActive);\n\n    this.setState({\n      active: toggledActive\n    });\n  }\n\n  render() {\n    const { category, classes } = this.props,\n          { active } = this.state;\n\n    return (\n      <Button color=\"primary\" className={classes.button} variant={active ? 'contained' : 'text'} onClick={() => this.onClick()}>{category}</Button>\n    );\n  }\n}\n\nexport default withStyles(CategoryButtonStyles)(CategoryButton);","export const CategoryButtonStyles = (theme) => ({\n  button: {\n    display: 'inline-block',\n    margin: '0.5em'\n  }\n});","import React, { Component, createRef } from 'react';\nimport { TextField } from '@material-ui/core';\n\nclass Search extends Component {\n  state = {};\n\n  constructor(props) {\n    super(props);\n    this.textField = createRef();\n  }\n\n  emit() {\n    if(this.props.onUpdate) {\n      this.props.onUpdate(this.textField.current.value);\n    }\n  }\n\n  onChange(evt) {\n    if(!this.state.update) {\n      this.setState({\n        update: setTimeout(() => { \n          this.emit();\n          this.setState({ update:null });\n        }, 1000)\n      });\n    }\n  }\n\n  render() {\n    return (\n      <TextField\n        id=\"outlined-required\"\n        label=\"Find a Skill\"\n        variant=\"outlined\"\n        fullWidth\n        onChange={this.onChange.bind(this)}\n        inputRef={this.textField}\n      />\n    );\n  }\n}\n\nexport default Search;","import React, { Component } from 'react';\nimport './App.css';\nimport data from './data.json';\nimport Skill from './components/Skill/Skill';\nimport { Grid, withStyles, Box, Typography } from '@material-ui/core';\nimport { AppStyles } from './AppStyles';\nimport Masonry from 'react-masonry-css';\nimport CategoryButton from './components/CategoryButton/CategoryButton';\nimport Search from './components/Search/Search';\n\nclass App extends Component {\n  state = {\n    filter: {\n      categories: new Set(),\n      text: ''\n    }\n  }\n\n  updateCategoryFitler(id, isActive) {\n    const newCategories = new Set(this.state.filter.categories);\n\n    if(isActive) {\n      newCategories.add(id);\n    } else {\n      newCategories.delete(id);\n    }\n\n    this.setState({filter:{\n      ...this.state.filter,\n      categories: newCategories\n    }});\n  }\n\n  updateTextFilter(text) {\n    this.setState({filter:{\n      ...this.state.filter,\n      text\n    }});\n  }\n\n  getSkills() {\n    const { filter } = this.state;\n\n    if(!filter.categories.size && !filter.text) return [];\n\n    let skills = data.skills;\n    if(filter.categories.size) {\n      skills = skills.filter(s => {\n          return !!s.categories\n            .filter(c => {\n              return filter.categories.has(c)\n            }).length;\n        });\n    }\n\n    if(filter.text) {\n      skills = skills.filter(s => {\n        return s.name.toLowerCase().includes(filter.text) \n          || s.description.toLowerCase().includes(filter.text);\n      });\n    }\n\n    return skills;\n  }\n\n  render() {\n    const skills = this.getSkills(),\n          { classes } = this.props;\n\n    return (\n      <Grid container>\n        <Grid item className={classes.actionsArea}>\n          <Typography variant=\"h1\">Skillpendium</Typography>\n          <Box m={2}>\n            <Search onUpdate={this.updateTextFilter.bind(this)} />\n          </Box>\n          <Box>\n            {data.categories.map((c, i) => (\n              <CategoryButton key={i} category={c} categoryId={i} onToggle={this.updateCategoryFitler.bind(this)}/>\n            ))}\n          </Box>\n\n        </Grid>\n        <Grid item className={classes.skillsArea}>\n          {skills.length ? (\n              <Masonry\n                breakpointCols={3}\n                className={classes.masonryContainer}\n                columnClassName={classes.masonryColumn}\n              >\n                {skills.map(s => (\n                  <Skill key={s.tag} className={classes.masonryItem} skill={s}/>\n                ))}\n              </Masonry>\n            ) : (\n              <Typography variant=\"h6\" className={classes.welcomeText}>To get started select some categories or enter a search.</Typography>\n            )}\n        </Grid>\n        \n      </Grid>\n          \n    )\n  }\n}\n\nexport default withStyles(AppStyles)(App);\n","export const AppStyles = (theme) => ({\n  actionsArea: {\n    flex: '0 1 25%',\n    textAlign: 'center'\n  },\n  welcomeText: {\n    margin: '2em',\n    textAlign: 'center'\n  },\n  skillsArea: {\n    flex: '1',\n    overflow: 'auto',\n    maxHeight: '100vh'\n  },\n  masonryContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n    width: 'auto',\n    margin: '0.5em',\n  },\n  masonryColumn: {\n    padding: '0 0.5em'\n  },\n  masonryItem: {\n    marginBottom: '1em'\n  }\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nexport const SkillpendiumTheme = createMuiTheme({\n  palette: {}\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { CssBaseline, ThemeProvider } from '@material-ui/core';\nimport { SkillpendiumTheme } from './muiTheme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={SkillpendiumTheme}>\n      <CssBaseline/>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}